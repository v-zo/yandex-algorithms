/*

–ø–æ—Å—ã–ª–∫–∞ 46162039

-- –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´ --
	–ü–µ—Ä–≤–∞—è –∏–¥–µ—è: —Å–Ω–∞—á–∞–ª–æ –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å j –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º.
–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–¥–≤–∏–Ω—É—Ç—ã –Ω–∞ j –ø–æ–∑–∏—Ü–∏–π. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º
–¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –±—É–¥–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –≤ –Ω–µ–º –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∏–Ω–∞—Ä–Ω–æ–≥–æ
–ø–æ–∏—Å–∫–∞ –Ω–æ –Ω–∞ —ç—Ç–æ —Ä–∞–∑ –∏—Å–∫–æ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ k.
–î–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏ —Ç.–∫. 2 –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–∞ —ç—Ç–æ O(log n) + O(log n)
–≤ –∏—Ç–æ–≥–µ –≤—Å–µ—Ä–∞–≤–Ω–æ O(log n).
	–û–¥–Ω–∞–∫–æ –∞–ª–≥–æ—Ä–∏—Ç–º –º–æ–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å, –µ—Å–ª–∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫—É k —Å—Ä–∞–∑—É. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ mid –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–Ω–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫, –Ω–µ–∂–µ–ª–∏ –ø—Ä–æ—Å—Ç–æ
—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å k. –°—É—â–µ—Å—Ç–≤—É–µ—Ç 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è mid –∏ k. –í—Å–µ –æ–Ω–∏ —Å—Ö–µ–º–∞—Ç–∏—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã
–≤ –∫–æ–º–µ–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ getSide. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ "–ª–µ–≤–æ–π"
–∏–ª–∏ "–ø—Ä–∞–≤–æ–π" –ø–æ–ª–æ–≤–∏–Ω–∫–µ, –∞ –¥–∞–ª–µ–µ–µ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –æ–±—ã—á–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫.
–•–æ—Ç—è —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤—Å–µ—Ä–∞–≤–Ω–æ —Ç–∞ –∂–µ - O(log n)

-- –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–û –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò --
	–ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –æ–±—ã—á–Ω—ã–º –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –≤ –æ—Å—Ç–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ, –º—ã –∏–º–µ–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ
–¥–µ–ª–µ–Ω–∏–µ "–æ—Ç—Ä–µ–∑–∫–∞" –ø–æ–ø–æ–ª–∞–º, –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–µ —á–µ–≥–æ –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ –¥–ª–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∫–∞ 1 –∏–ª–∏ 0 –Ω–µ–º–∏–Ω—É–µ–º.
–ï—Å–ª–∏ –∂–µ –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç k –≤ –º–∞—Å—Å–∏–≤–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ —Ä–µ–∫—É—Ä—Å–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ä–∞–Ω—å—à–µ - —ç—Ç–æ —Ç–æ–∂–µ –±–∞–∑–æ–≤—ã–π
—Å–ª—É—á–∞–π.

-- –í–†–ï–ú–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ --
	–°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–∞ –∂–µ, —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
–ù–∞ –∫–∞–∂–¥–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏ –º—ã –¥–µ–ª–∏–º —Ç–µ–∫—É—â–∏–π –æ—Ç—Ä–µ–∑–æ–∫ –ø–æ–ø–æ–ª–∞–º –∑–∞ O(1).
–¢.–µ. –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ –¥–ª–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∫–∞ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ n/2, –Ω–∞ –≤—Ç–æ—Ä–æ–º - n/4, –∑–∞—Ç–µ–º n/8, ...
–í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –Ω–∞ –∫–∞–∫–æ–º —Ç–æ i-–æ–º —à–∞–≥–µ –º—ã —Å–æ–π–¥–µ–º—Å—è –∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É: 1 == n/2^i, –∏–ª–∏ 2^i==n,
–æ—Ç–∫—É–¥–∞ –ø–æ–ª—É—á–∏–º —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å i = log2(n) —Ä–µ–∫—É—Ä—Å–∏–π, —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é O(1) –∫–∞–∂–¥–∞—è.
–ò—Ç–æ–≥–æ–≤–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å - O(log n).

*/

package main

import (
	"bufio"
	"os"
	"strconv"
	"strings"
)

func main() {
	file := openFile("input.txt")
	defer file.Close()

	reader := bufio.NewReader(file)
	writer := bufio.NewWriter(os.Stdout)

	Solve(reader, writer)
}

func Solve(reader *bufio.Reader, writer *bufio.Writer) {
	n, k, elements := readData(reader)

	result := binarySearch(elements, 0, n-1, k)

	writer.WriteString(strconv.Itoa(result))
	writer.WriteString("\n")

	writer.Flush()
}

type IntList struct {
	str []string
}

func (list IntList) getEl(i int) (value int) {
	value, _ = strconv.Atoi(list.str[i])
	return
}

type Side int

const (
	undef Side = iota
	left
	right
)

func binarySearch(elements IntList, st int, end int, k int) int {
	stEl := elements.getEl(st)
	endEl := elements.getEl(end)

	if endEl == k {
		return end
	}

	if stEl == k {
		return st
	}

	if end-st <= 1 {
		return -1
	}

	mid := (st + end) / 2
	midEl := elements.getEl(mid)

	if midEl == k {
		return mid
	}

	switch getSide(stEl, midEl, endEl, k) {
	case left:
		return binarySearch(elements, st, mid-1, k)
	case right:
		return binarySearch(elements, mid+1, end, k)
	default:
		return -1
	}
}

func getSide(stEl int, midEl int, endEl int, k int) (side Side) {
	if midEl < endEl {
		if k < midEl {
			side = left //   * * * * * ‚àô üèÅ ‚àô üëÜ ‚àô ‚àô ‚àô ‚àô
		} else {
			if k < endEl {
				side = right //   * * * * * ‚àô ‚àô ‚àô üëÜ  ‚àô ‚àô üèÅ ‚àô
			} else {
				side = left //   * * üèÅ * * ‚àô ‚àô ‚àô üëÜ ‚àô ‚àô ‚àô ‚àô
			}
		}
	} else {
		if k > midEl {
			side = right //   * * * * üëÜ * üèÅ * ‚àô ‚àô ‚àô ‚àô ‚àô
		} else {
			if k > stEl {
				side = left //   * üèÅ * * üëÜ * * * ‚àô ‚àô ‚àô ‚àô ‚àô
			} else {
				side = right //   * * * * üëÜ * * * ‚àô ‚àô üèÅ ‚àô ‚àô
			}
		}
	}

	if side == undef {
		panic("side is undefined")
	}

	return
}

func readData(reader *bufio.Reader) (n int, k int, elements IntList) {
	line1, _ := reader.ReadString('\n')
	line2, _ := reader.ReadString('\n')
	line3, _ := reader.ReadString('\n')

	n, _ = strconv.Atoi(strings.TrimRight(line1, "\n"))
	k, _ = strconv.Atoi(strings.TrimRight(line2, "\n"))
	elements = IntList{strings.Fields(line3)}

	return
}

func openFile(path string) *os.File {
	file, err := os.Open(path)

	if err != nil {
		panic(err)
	}

	return file
}
